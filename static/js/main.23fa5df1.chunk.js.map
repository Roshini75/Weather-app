{"version":3,"sources":["Components/WeatherInfo.js","Components/WeatherContainer.js","Components/App.js","serviceWorker.js","index.js"],"names":["WeatherInfo","className","this","props","desc","src","icon","temp","humidity","React","Component","WeatherContainer","state","input","description","onChangeInput","bind","setWeatherData","getAPIData","keyPressed","event","key","data","main","setState","toFixed","weather","flag","fetch","then","json","target","value","onKeyPress","type","placeholder","onChange","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uUAgBeA,G,6LAZP,OACI,yBAAKC,UAAY,gBACb,4BAAKC,KAAKC,MAAMC,MAChB,yBAAKC,IAAG,0CAAqCH,KAAKC,MAAMG,KAAhD,UACR,2CACA,2BAAIJ,KAAKC,MAAMI,MACf,wCACA,2BAAIL,KAAKC,MAAMK,e,GATLC,IAAMC,YCuEjBC,E,YApEX,WAAYR,GAAO,IAAD,8BACd,4CAAMA,KACDS,MAAM,CACPC,MAAQ,GACRN,KAAK,KACLD,KAAO,KACPE,SAAW,KACXM,YAAa,MAEjB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAZJ,E,wEAePI,GACW,UAAdA,EAAMC,KACNnB,KAAKgB,e,qCAIEI,GACRA,EAAKC,MACRrB,KAAKsB,SAAS,CACVjB,MAAOe,EAAKC,KAAKhB,KAAO,QAAQkB,QAAQ,GACxCrB,KAAOkB,EAAKI,QAAQ,GAAGZ,YACvBN,SAAWc,EAAKC,KAAKf,SACrBF,KAAOgB,EAAKI,QAAQ,GAAGpB,S,mCAMlB,IAAD,OACRJ,KAAKsB,SAAS,CACVjB,KAAK,KACLC,SAAS,KACTF,KAAK,KACLF,KAAO,KACPuB,MAAM,IAGVC,MAAM,qDAAD,OAAsD1B,KAAKU,MAAMC,MAAjE,kBADW,qCACgFgB,MAAK,SAAAP,GAAI,OAAEA,EAAKQ,UAC/GD,MAAK,SAAAP,GAAI,OAAE,EAAKL,eAAeK,Q,oCAEtBF,GACXlB,KAAKsB,SAAS,CACVX,MAAQO,EAAMW,OAAOC,U,+BAIxB,OACI,6BAAS/B,UAAU,qBACnB,4BAAQA,UAAU,kBACd,uCACC,6BACG,2BAAOA,UAAY,mBAAmBgC,WAAY/B,KAAKiB,WAAYe,KAAK,OAAOC,YAAa,kBAAkBC,SAAYlC,KAAKa,cAAciB,MAAO9B,KAAKU,MAAMC,QAC/J,4BAAQwB,QAASnC,KAAKgB,WAAYjB,UAAU,kBAA5C,YAGR,8BACMC,KAAKU,MAAML,KAAM,kBAAC,EAAD,CAAaA,KAAML,KAAKU,MAAML,KAAMC,SAAUN,KAAKU,MAAMJ,SAAUJ,KAAMF,KAAKU,MAAMR,KACvGE,KAAMJ,KAAKU,MAAMN,OAAQ,uBAAGL,UAAU,SAAb,wC,GAhEVQ,IAAMC,WCStB4B,MARf,WACE,OACE,6BAASrC,UAAU,iBACjB,kBAAC,EAAD,QCKcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.23fa5df1.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Styles/WeatherInfo.css';\r\nclass WeatherInfo extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className = 'weather-info'>\r\n                <h3>{this.props.desc}</h3>\r\n                <img src={`http://openweathermap.org/img/w/${this.props.icon}.png`}/>\r\n                <h3>Temperature</h3>\r\n                <p>{this.props.temp}</p>\r\n                <h3>Humidity</h3>\r\n                <p>{this.props.humidity}</p>\r\n            </div>\r\n        );\r\n    }\r\n} \r\nexport default WeatherInfo;","import React from 'react';\r\nimport  '../Styles/WeatherContainer.css';\r\nimport WeatherInfo from './WeatherInfo';\r\nclass WeatherContainer extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            input : '',\r\n            temp:null,\r\n            icon : null,\r\n            humidity : null,\r\n            description: null,\r\n        }\r\n        this.onChangeInput = this.onChangeInput.bind(this);\r\n        this.setWeatherData = this.setWeatherData.bind(this);\r\n        this.getAPIData = this.getAPIData.bind(this);\r\n        this.keyPressed = this.keyPressed.bind(this);\r\n    }\r\n\r\n    keyPressed(event){\r\n        if (event.key === \"Enter\") {\r\n            this.getAPIData();\r\n          }\r\n    }\r\n    \r\n    setWeatherData(data){\r\n        if(data.main){\r\n        this.setState({\r\n            temp: (data.main.temp - 273.15).toFixed(2),\r\n            desc : data.weather[0].description,\r\n            humidity : data.main.humidity,\r\n            icon : data.weather[0].icon,\r\n        })\r\n        }\r\n    }\r\n\r\n\r\n    getAPIData(){\r\n        this.setState({\r\n            temp:null,\r\n            humidity:null,\r\n            icon:null,\r\n            desc : null,\r\n            flag :false\r\n        });\r\n        const API_KEY = '62000e2712d3e8a01fd451fc1bb141e9';\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.input}&appid=${API_KEY}`).then(data=>data.json())\r\n        .then(data=>this.setWeatherData(data));\r\n    }\r\n    onChangeInput(event){\r\n       this.setState({\r\n           input : event.target.value\r\n       })\r\n    }\r\n    render(){\r\n        return(\r\n            <section className=\"weather-container\">\r\n            <header className=\"weather-header\">\r\n                <h3>Weather</h3>\r\n                 <div>\r\n                    <input className = \"search-input-box\" onKeyPress={this.keyPressed} type=\"text\" placeholder= \"Enter City name\" onChange = {this.onChangeInput}value={this.state.input} />\r\n                    <button onClick={this.getAPIData} className=\"material-icons\">search</button>\r\n                 </div>\r\n            </header>\r\n            <body>\r\n                {(this.state.temp)?<WeatherInfo temp={this.state.temp} humidity={this.state.humidity} desc={this.state.desc} \r\n                icon={this.state.icon}/>:<p className=\"Error\">Please enter the valid city!!!</p>}\r\n            </body>\r\n            </section>\r\n        ); \r\n    }\r\n}\r\nexport default WeatherContainer;","import React from 'react';\nimport '../Styles/App.css';\nimport WeatherContainer from'./WeatherContainer';\n\nfunction App() {\n  return (\n    <section className=\"app-container\">\n      <WeatherContainer/>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}